##脚本：HB≤L-LB-LA-LC-KB
let errmsg = nil;
if(HB!= nil && L!= nil && LB!= nil && LA!= nil && LC!= nil && KB!= nil){
   HB=decimal(HB);
   L=decimal(L);
   LB=decimal(LB);
   LA=decimal(LA);
   LC=decimal(LC);
   KB=decimal(KB);
   let L=L-LB-LA-LC-KB;
   if(HB<=L){
       return true;
   }else{
       errmsg = "需满足公式 HB≤L-LB-LA-LC-KB";
       return errmsg;
   }
}
return true;

##脚本：KC≤LC-HC-2
let errmsg = nil;
if(KC!= nil && LC!= nil && HC!= nil){
   KC=decimal(KC);
   LC=decimal(LC);
   HC=decimal(HC);
   let LC=LC-HC-2;
   if(KC<=LC){
       return true;
   }else{
       errmsg = "需满足公式 KC≤LC-HC-2";
       return errmsg;
   }
}
return true;

##脚本：HC≤LC-KC-2
let errmsg = nil;
if(HC!= nil && LC!= nil && KC!= nil){
   HC=decimal(HC);
   LC=decimal(LC);
   KC=decimal(KC);
   let LC=LC-KC-2;
   if(HC<=LC){
       return true;
   }else{
       errmsg = "需满足公式 HC≤LC-KC-2";
       return errmsg;
   }
}
return true;

##脚本：KD≤L-LA-LC-LB-HD-2
let errmsg = nil;
if(KD!= nil && L!= nil && LA!= nil && LC!= nil && LB!= nil && HD!= nil){
   KD=decimal(KD);
   L=decimal(L);
   LA=decimal(LA);
   LC=decimal(LC);
   LB=decimal(LB);
   HD=decimal(HD);
   let L=L-LA-LC-LB-HD-2;
   if(KD<=L){
       return true;
   }else{
       errmsg = "需满足公式 KD≤L-LA-LC-LB-HD-2";
       return errmsg;
   }
}
return true;

##脚本：KD≥KB+HB+1
let errmsg = nil;
if(KD!= nil && KB!= nil && HB!= nil){
   KD=decimal(KD);
   KB=decimal(KB);
   HB=decimal(HB);
   let KB=KB+HB+1;
   if(KD>=KB){
       return true;
   }else{
       errmsg = "需满足公式 KD≥KB+HB+1";
       return errmsg;
   }
}
return true;

##脚本：HD≤L-LA-LB-LC-KD-2
let errmsg = nil;
if(HD!= nil && L!= nil && LA!= nil && LB!= nil && LC!= nil && KD!= nil){
   HD=decimal(HD);
   L=decimal(L);
   LA=decimal(LA);
   LB=decimal(LB);
   LC=decimal(LC);
   KD=decimal(KD);
   let L=L-LA-LB-LC-KD-2;
   if(HD<=L){
       return true;
   }else{
       errmsg = "需满足公式 HD≤L-LA-LB-LC-KD-2";
       return errmsg;
   }
}
return true;

##脚本：ZA≤LA-HA_2-2
let errmsg = nil;
if(ZA!= nil && LA!= nil){
   ZA=decimal(ZA);
   LA=decimal(LA);
   let LA=LA-HA_2-2;
   if(ZA<=LA){
       return true;
   }else{
       errmsg = "需满足公式 ZA≤LA-HA_2-2";
       return errmsg;
   }
}
return true;

##脚本：HA_2≤LA-ZA-2
let errmsg = nil;
if(HA_2!= nil && LA!= nil && ZA!= nil){
   HA_2=decimal(HA_2);
   LA=decimal(LA);
   ZA=decimal(ZA);
   let LA=LA-ZA-2;
   if(HA_2<=LA){
       return true;
   }else{
       errmsg = "需满足公式 HA_2≤LA-ZA-2";
       return errmsg;
   }
}
return true;

##脚本：HA_2≤LA-1
let errmsg = nil;
if(HA_2!= nil && LA!= nil){
   HA_2=decimal(HA_2);
   LA=decimal(LA);
   let LA=LA-1;
   if(HA_2<=LA){
       return true;
   }else{
       errmsg = "需满足公式 HA_2≤LA-1";
       return errmsg;
   }
}
return true;

##脚本：ZB≤L-LA-LB-LC-HB_2
let errmsg = nil;
if(ZB!= nil && L!= nil && LA!= nil && LB!= nil && LC!= nil){
   ZB=decimal(ZB);
   L=decimal(L);
   LA=decimal(LA);
   LB=decimal(LB);
   LC=decimal(LC);
   let L=L-LA-LB-LC-HB_2;
   if(ZB<=L){
       return true;
   }else{
       errmsg = "需满足公式 ZB≤L-LA-LB-LC-HB_2";
       return errmsg;
   }
}
return true;

##脚本：ZB≤ZD-HB_2-1
let errmsg = nil;
if(ZB!= nil && ZD!= nil){
   ZB=decimal(ZB);
   ZD=decimal(ZD);
   let ZD=ZD-HB_2-1;
   if(ZB<=ZD){
       return true;
   }else{
       errmsg = "需满足公式 ZB≤ZD-HB_2-1";
       return errmsg;
   }
}
return true;

##脚本：HB_2≤L-LA-LB-LC-KB
let errmsg = nil;
if(HB_2!= nil && L!= nil && LA!= nil && LB!= nil && LC!= nil && KB!= nil){
   HB_2=decimal(HB_2);
   L=decimal(L);
   LA=decimal(LA);
   LB=decimal(LB);
   LC=decimal(LC);
   KB=decimal(KB);
   let L=L-LA-LB-LC-KB;
   if(HB_2<=L){
       return true;
   }else{
       errmsg = "需满足公式 HB_2≤L-LA-LB-LC-KB";
       return errmsg;
   }
}
return true;

##脚本：HB_2≤ZD-KB-1
let errmsg = nil;
if(HB_2!= nil && ZD!= nil && KB!= nil){
   HB_2=decimal(HB_2);
   ZD=decimal(ZD);
   KB=decimal(KB);
   let ZD=ZD-KB-1;
   if(HB_2<=ZD){
       return true;
   }else{
       errmsg = "需满足公式 HB_2≤ZD-KB-1";
       return errmsg;
   }
}
return true;

##脚本：ZC≤ZD-1-HC_2
let errmsg = nil;
if(ZC!= nil && ZD!= nil){
   ZC=decimal(ZC);
   ZD=decimal(ZD);
   let ZD=ZD-1-HC_2;
   if(ZC<=ZD){
       return true;
   }else{
       errmsg = "需满足公式 ZC≤ZD-1-HC_2";
       return errmsg;
   }
}
return true;

##脚本：HC_2≤ZD-ZC-1
let errmsg = nil;
if(HC_2!= nil && ZD!= nil && ZC!= nil){
   HC_2=decimal(HC_2);
   ZD=decimal(ZD);
   ZC=decimal(ZC);
   let ZD=ZD-ZC-1;
   if(HC_2<=ZD){
       return true;
   }else{
       errmsg = "需满足公式 HC_2≤ZD-ZC-1";
       return errmsg;
   }
}
return true;

##脚本：ZD≤L-LA-LB-LC-HD_2
let errmsg = nil;
if(ZD!= nil && L!= nil && LA!= nil && LB!= nil && LC!= nil){
   ZD=decimal(ZD);
   L=decimal(L);
   LA=decimal(LA);
   LB=decimal(LB);
   LC=decimal(LC);
   let L=L-LA-LB-LC-HD_2;
   if(ZD<=L){
       return true;
   }else{
       errmsg = "需满足公式 ZD≤L-LA-LB-LC-HD_2";
       return errmsg;
   }
}
return true;

##脚本：ZD≥ZC+HC_2+1
let errmsg = nil;
if(ZD!= nil && ZC!= nil){
   ZD=decimal(ZD);
   ZC=decimal(ZC);
   let ZC=ZC+HC_2+1;
   if(ZD>=ZC){
       return true;
   }else{
       errmsg = "需满足公式 ZD≥ZC+HC_2+1";
       return errmsg;
   }
}
return true;

##脚本：HD≤L-LA-LB-LC-ZD
let errmsg = nil;
if(HD!= nil && L!= nil && LA!= nil && LB!= nil && LC!= nil && ZD!= nil){
   HD=decimal(HD);
   L=decimal(L);
   LA=decimal(LA);
   LB=decimal(LB);
   LC=decimal(LC);
   ZD=decimal(ZD);
   let L=L-LA-LB-LC-ZD;
   if(HD<=L){
       return true;
   }else{
       errmsg = "需满足公式 HD≤L-LA-LB-LC-ZD";
       return errmsg;
   }
}
return true;

##脚本：TA≤LA-3
let errmsg = nil;
if(TA!= nil && LA!= nil){
   TA=decimal(TA);
   LA=decimal(LA);
   let LA=LA-3;
   if(TA<=LA){
       return true;
   }else{
       errmsg = "需满足公式 TA≤LA-3";
       return errmsg;
   }
}
return true;

##脚本：TB≤LB-3
let errmsg = nil;
if(TB!= nil && LB!= nil){
   TB=decimal(TB);
   LB=decimal(LB);
   let LB=LB-3;
   if(TB<=LB){
       return true;
   }else{
       errmsg = "需满足公式 TB≤LB-3";
       return errmsg;
   }
}
return true;

##脚本：TC≤LC-3
let errmsg = nil;
if(TC!= nil && LC!= nil){
   TC=decimal(TC);
   LC=decimal(LC);
   let LC=LC-3;
   if(TC<=LC){
       return true;
   }else{
       errmsg = "需满足公式 TC≤LC-3";
       return errmsg;
   }
}
return true;

##脚本：SA≤LA-l1
let errmsg = nil;
if(SA!= nil && LA!= nil){
   SA=decimal(SA);
   LA=decimal(LA);
   let LA=LA-l1;
   if(SA<=LA){
       return true;
   }else{
       errmsg = "需满足公式 SA≤LA-l1";
       return errmsg;
   }
}
return true;

##脚本：SD≤L-LA-LB-LC-l1
let errmsg = nil;
if(SD!= nil && L!= nil && LA!= nil && LB!= nil && LC!= nil){
   SD=decimal(SD);
   L=decimal(L);
   LA=decimal(LA);
   LB=decimal(LB);
   LC=decimal(LC);
   let L=L-LA-LB-LC-l1;
   if(SD<=L){
       return true;
   }else{
       errmsg = "需满足公式 SD≤L-LA-LB-LC-l1";
       return errmsg;
   }
}
return true;

##脚本：SC≤LC-l1
let errmsg = nil;
if(SC!= nil && LC!= nil){
   SC=decimal(SC);
   LC=decimal(LC);
   let LC=LC-l1;
   if(SC<=LC){
       return true;
   }else{
       errmsg = "需满足公式 SC≤LC-l1";
       return errmsg;
   }
}
return true;

##脚本：WA≤LA-GA
let errmsg = nil;
if(WA!= nil && LA!= nil && GA!= nil){
   WA=decimal(WA);
   LA=decimal(LA);
   GA=decimal(GA);
   let LA=LA-GA;
   if(WA<=LA){
       return true;
   }else{
       errmsg = "需满足公式 WA≤LA-GA";
       return errmsg;
   }
}
return true;

##脚本：GA≤LA-WA
let errmsg = nil;
if(GA!= nil && LA!= nil && WA!= nil){
   GA=decimal(GA);
   LA=decimal(LA);
   WA=decimal(WA);
   let LA=LA-WA;
   if(GA<=LA){
       return true;
   }else{
       errmsg = "需满足公式 GA≤LA-WA";
       return errmsg;
   }
}
return true;

##脚本：WC≤LC-GC
let errmsg = nil;
if(WC!= nil && LC!= nil && GC!= nil){
   WC=decimal(WC);
   LC=decimal(LC);
   GC=decimal(GC);
   let LC=LC-GC;
   if(WC<=LC){
       return true;
   }else{
       errmsg = "需满足公式 WC≤LC-GC";
       return errmsg;
   }
}
return true;

##脚本：GC≤LC-WC
let errmsg = nil;
if(GC!= nil && LC!= nil && WC!= nil){
   GC=decimal(GC);
   LC=decimal(LC);
   WC=decimal(WC);
   let LC=LC-WC;
   if(GC<=LC){
       return true;
   }else{
       errmsg = "需满足公式 GC≤LC-WC";
       return errmsg;
   }
}
return true;

##脚本：WD≤L-LA-LB-LC-GD
let errmsg = nil;
if(WD!= nil && L!= nil && LA!= nil && LB!= nil && LC!= nil && GD!= nil){
   WD=decimal(WD);
   L=decimal(L);
   LA=decimal(LA);
   LB=decimal(LB);
   LC=decimal(LC);
   GD=decimal(GD);
   let L=L-LA-LB-LC-GD;
   if(WD<=L){
       return true;
   }else{
       errmsg = "需满足公式 WD≤L-LA-LB-LC-GD";
       return errmsg;
   }
}
return true;

##脚本：GD≤L-LA-LC-LB-WB
let errmsg = nil;
if(GD!= nil && L!= nil && LA!= nil && LC!= nil && LB!= nil && WB!= nil){
   GD=decimal(GD);
   L=decimal(L);
   LA=decimal(LA);
   LC=decimal(LC);
   LB=decimal(LB);
   WB=decimal(WB);
   let L=L-LA-LC-LB-WB;
   if(GD<=L){
       return true;
   }else{
       errmsg = "需满足公式 GD≤L-LA-LC-LB-WB";
       return errmsg;
   }
}
return true;

