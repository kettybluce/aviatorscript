##脚本：ZD_2≥ZC_2+D+HC_2+1
if(if(inputInspection(appendSpec,"ZC_2")&& D!=nil  && inputInspection(appendSpec,"HC_2") ){
    let ZC_2=fetchValue(appendSpec,"ZC_2");
    D=decimal(D);
    let HC_2=fetchValue(appendSpec,"HC_2");
    ZC_2=ZC_2+D+HC_2+1;
    changeMinimum(ZC_2,list,"ZD_2",true);
}
##脚本：ZC_2+1+D≥ZD_2
if(if(inputInspection(appendSpec,"ZC_2")&& D!=nil ){
    let ZC_2=fetchValue(appendSpec,"ZC_2");
    D=decimal(D);
    ZC_2=ZC_2+1+D;
    changeMinimum(ZC_2,list,"ZC_2+1+D",true);
}
##脚本：ZD_2≤ZC_2+D+HC_2+1
if(if(inputInspection(appendSpec,"ZC_2")&& D!=nil  && inputInspection(appendSpec,"HC_2") ){
    let ZC_2=fetchValue(appendSpec,"ZC_2");
    D=decimal(D);
    let HC_2=fetchValue(appendSpec,"HC_2");
    ZC_2=ZC_2+D+HC_2+1;
    changeMaximum(ZC_2,list,"ZD_2",true);
}
##脚本：ZC_2+1+D≤ZD_2
if(if(inputInspection(appendSpec,"ZC_2")&& D!=nil ){
    let ZC_2=fetchValue(appendSpec,"ZC_2");
    D=decimal(D);
    ZC_2=ZC_2+1+D;
    changeMaximum(ZC_2,list,"ZC_2+1+D",true);
}
##脚本：SD≤L-LA-LB-LC-l1
if(if(inputInspection(attrSpec,"L") && inputInspection(attrSpec,"LA")  && inputInspection(attrSpec,"LB")  && inputInspection(attrSpec,"LC")  && inputInspection(appendSpec,"l1") ){
    let L=fetchValue(attrSpec,"L");
    let LA=fetchValue(attrSpec,"LA");
    let LB=fetchValue(attrSpec,"LB");
    let LC=fetchValue(attrSpec,"LC");
    let l1=fetchValue(appendSpec,"l1");
    L=L-LA-LB-LC-l1;
    changeMaximum(L,list,"SD",true);
}
