let p = productSearchSkuInfo;let scMax = nil;let lMin = nil;let D=specType;let a = seq.list("8", "10", "12", "12A");let b= seq.list("15", "17", "17A", "20");let c = seq.list("25", "30", "35");let d = seq.list("40", "10", "45");## 抽取遍历检查fn  inspection (attrSpec,value){     for m in attrSpec {        if(m.enSpecName==value){            return false;        }     }      return true;}## 改变对应值的最大值和最小值fn  AlteredValue(scMax,lMin,list,value){    for m in list {        for n in m.specRangeList {            if(m.enSpecName == value){                n.maxValue = scMax;                n.minValue = lMin;            }        }    }}## 删除点选的值的范围fn removeValue(delete_list,list,value){    ## 筛选对应的需要消除的点选集合    let new_delete_list=seq.list();    for m in list {        ## 遍历属性集合        if(m.enSpecName==value){            for x in m.specValueList{                ## 遍历SPU所有的点选集合                for y in delete_list{                    ## 匹配符合条件的筛选集合并加入可删除的元素                    if(x.specValue==y){                        seq.add(new_delete_list,x);                    }                }            }            ## 遍历可删除集合，从该属性的点选集合中删除该元素            for q in new_delete_list{                seq.remove(m.specValueList, q);            }        }    }}## 检查点选型不为空,且D的值不为空 影响L的值域范围if(genSpec!=nil && D !=nil  && include(a, D) && inspection(attrSpec,"L")){    AlteredValue(50,300,p.specList,"L");}if(genSpec!=nil && D !=nil  && include(b, D) && inspection(attrSpec,"L")){    AlteredValue(100,400,p.specList,"L");}if(genSpec!=nil && D !=nil  && include(c, D) && inspection(attrSpec,"L")){    AlteredValue(100,500,p.specList,"L");}if(genSpec!=nil && D !=nil  && include(d, D) && inspection(attrSpec,"L")){    AlteredValue(200,500,p.specList,"L");}let e = seq.list("8", "10", "12" );let f= seq.list("12A","15", "17", "17A", "20");let g = seq.list("25", "30", "35","40", "10", "45");## 检查点选型不为空,且D的值不为空 T的值为空，影响T的值域范围if(genSpec!=nil && D !=nil  && include(e, D) && inspection(attrSpec,"T")){   let delete_list = seq.list("25","30","40","50");   removeValue(delete_list,p.specList,"T");}if(genSpec!=nil && D !=nil  && include(f, D) && inspection(attrSpec,"T")){    let delete_list = seq.list("5","30","40","50");    removeValue(delete_list,p.specList,"T")}if(genSpec!=nil && D !=nil  && include(g, D) && inspection(attrSpec,"T")){    let delete_list = seq.list("5","15","25");    removeValue(delete_list,p.specList,"T")}return p;