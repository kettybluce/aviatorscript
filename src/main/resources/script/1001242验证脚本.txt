##脚本：KA,HAlet errmsg = nil;if((KA!= nil && HA!= nil)||(KA== nil && HA== nil)){    return true;} else {   errmsg = "型号中需指定下述参数。(KA HA)";   return errmsg;}##脚本：KC,HClet errmsg = nil;if((KC!= nil && HC!= nil)||(KC== nil && HC== nil)){    return true;} else {   errmsg = "型号中需指定下述参数。(KC HC)";   return errmsg;}##脚本：KB,HBlet errmsg = nil;if((KB!= nil && HB!= nil)||(KB== nil && HB== nil)){    return true;} else {   errmsg = "型号中需指定下述参数。(KB HB)";   return errmsg;}##脚本：ZA,HA_2,AAlet errmsg = nil;if((ZA!= nil && HA_2!= nil && AA!= nil)||(ZA== nil && HA_2== nil && AA== nil)){    return true;} else {   errmsg = "型号中需指定下述参数。(ZA HA_2 AA)";   return errmsg;}##脚本：ZC,HC_2,AClet errmsg = nil;if((ZC!= nil && HC_2!= nil && AC!= nil)||(ZC== nil && HC_2== nil && AC== nil)){    return true;} else {   errmsg = "型号中需指定下述参数。(ZC HC_2 AC)";   return errmsg;}##脚本：ZB,HB_2,ABlet errmsg = nil;if((ZB!= nil && HB_2!= nil && AB!= nil)||(ZB== nil && HB_2== nil && AB== nil)){    return true;} else {   errmsg = "型号中需指定下述参数。(ZB HB_2 AB)";   return errmsg;}##脚本：WA,GA,AA_2let errmsg = nil;if((WA!= nil && GA!= nil && AA_2!= nil)||(WA== nil && GA== nil && AA_2== nil)){    return true;} else {   errmsg = "型号中需指定下述参数。(WA GA AA_2)";   return errmsg;}##脚本：WB,GB,AB_2let errmsg = nil;if((WB!= nil && GB!= nil && AB_2!= nil)||(WB== nil && GB== nil && AB_2== nil)){    return true;} else {   errmsg = "型号中需指定下述参数。(WB GB AB_2)";   return errmsg;}##脚本：5≤MA≤LA-2let errmsg = nil;if(MA!= nil && LA!= nil){   MA=decimal(MA);   LA=decimal(LA);   let LA=LA-2;   if(5<=MA && MA<=LA){       return true;   }else{       errmsg = "需满足公式 5≤MA≤LA-2";       return errmsg;   }}return true;##脚本：LA≤5时，MA不适用let errmsg = nil;if(MA!= nil && LA!= nil){   LA=decimal(LA);   if(LA>5){       errmsg = "LA≤5时，MA不适用";       return errmsg;   }}return true;##脚本：5≤MSA≤LA-2let errmsg = nil;if(MSA!= nil && LA!= nil){   MSA=decimal(MSA);   LA=decimal(LA);   let LA=LA-2;   if(5<=MSA && MSA<=LA){       return true;   }else{       errmsg = "需满足公式 5≤MSA≤LA-2";       return errmsg;   }}return true;##脚本：LA≤5时，MSA不适用let errmsg = nil;if(MSA!= nil && LA!= nil){   LA=decimal(LA);   if(LA>5){       errmsg = "LA≤5时，MSA不适用";       return errmsg;   }}return true;##脚本：5≤MMA≤LA-2let errmsg = nil;if(MMA!= nil && LA!= nil){   MMA=decimal(MMA);   LA=decimal(LA);   let LA=LA-2;   if(5<=MMA && MMA<=LA){       return true;   }else{       errmsg = "需满足公式 5≤MMA≤LA-2";       return errmsg;   }}return true;##脚本：LA≤5时，MMA不适用let errmsg = nil;if(MMA!= nil && LA!= nil){   LA=decimal(LA);   if(LA>5){       errmsg = "LA≤5时，MMA不适用";       return errmsg;   }}return true;##脚本：KA≤LA-HA-2let errmsg = nil;if(KA!= nil && LA!= nil && HA!= nil){   KA=decimal(KA);   LA=decimal(LA);   HA=decimal(HA);   let LA=LA-HA-2;   if(KA<=LA){       return true;   }else{       errmsg = "需满足公式 KA≤LA-HA-2";       return errmsg;   }}return true;##脚本：HA≤LA-KA-2let errmsg = nil;if(HA!= nil && LA!= nil && KA!= nil){   HA=decimal(HA);   LA=decimal(LA);   KA=decimal(KA);   let LA=LA-KA-2;   if(HA<=LA){       return true;   }else{       errmsg = "需满足公式 HA≤LA-KA-2";       return errmsg;   }}return true;##脚本：HA≤LA-1let errmsg = nil;if(HA!= nil && LA!= nil ){   HA=decimal(HA);   LA=decimal(LA);   let LA=LA-1;   if(HA>LA){       errmsg = "HA的值必须处于 3 - 100范围内,才能生成型号 HA≤LA-1";       return errmsg;   }}return true;##脚本：KB≤L-LA-T-HB-1let errmsg = nil;if(KB!= nil && L!= nil && LA!= nil && T!= nil && HB!= nil){   KB=decimal(KB);   L=decimal(L);   LA=decimal(LA);   T=decimal(T);   HB=decimal(HB);   let L=L-LA-T-HB-1;   if(KB<=L){       return true;   }else{       errmsg = "需满足公式 KB≤L-LA-T-HB-1";       return errmsg;   }}return true;##脚本：KB≤KC-HB-1let errmsg = nil;if(KB!= nil && KC!= nil && HB!= nil){   KB=decimal(KB);   KC=decimal(KC);   HB=decimal(HB);   let KC=KC-HB-1;   if(KB<=KC){       return true;   }else{       errmsg = "需满足公式 KB≤KC-HB-1";       return errmsg;   }}return true;##脚本：复合公式1 HBlet errmsg = nil;if(L!= nil && LA!= nil && T!= nil && KB!= nil && HB !=nil){   L=decimal(L);   LA=decimal(LA);   T=decimal(T);   HB=decimal(HB);   KB=decimal(KB);   let L=L-LA-T-KB-1;   if(L>100 && HB>100){       errmsg = "当L-LA-T-KB-1>100时  校验HB≤100";       return errmsg;   }elsif(L<=100 && HB>L){       errmsg = "当L-LA-T-KB-1≤100时  校验HB≤L-LA-T-KB-1";       return errmsg;   }}return true;##脚本：复合公式2 HBlet errmsg = nil;if(KC!= nil && KB!= nil && HB !=nil){   KC=decimal(KC);   KB=decimal(KB);   HB=decimal(HB);   let KC=KC-KB-1;   if(KC>=100 && HB>100){       errmsg = "当KC-KB-1≥100时     校验HB≤100";       return errmsg;   }elsif(KC<=100 && HB>L){       errmsg = "当KC-KB-1<100时   校验HB≤KC-KB-1";       return errmsg;   }}return true;##脚本：KC≥KB+HB+1let errmsg = nil;if(KC!= nil && KB!= nil && HB!= nil){   KC=decimal(KC);   KB=decimal(KB);   HB=decimal(HB);   let KB=KB+HB+1;   if(KC>=KB){       return true;   }else{       errmsg = "指定 (KB・KC) 位于 KC>KB+HB 范围内。才能生成型号";       return errmsg;   }}return true;##脚本：KC≤L-T-LA-HC-2let errmsg = nil;if(KC!= nil && L!= nil && T!= nil && LA!= nil && HC!= nil){   KC=decimal(KC);   L=decimal(L);   T=decimal(T);   LA=decimal(LA);   HC=decimal(HC);   let L=L-T-LA-HC-2;   if(KC<=L){       return true;   }else{       errmsg = "需满足公式 KC≤L-T-LA-HC-2";       return errmsg;   }}return true;##脚本：复合公式 HClet errmsg = nil;if(L!= nil && LA!= nil && T!= nil && KC!= nil && HC !=nil){   L=decimal(L);   LA=decimal(LA);   T=decimal(T);   KC=decimal(KC);   HC=decimal(HC);   let L=L-LA-T-KC-2;   if(L>100 && HC>100){       errmsg = "当L-LA-T-KC-2>100时  校验HC≤100";       return errmsg;   }elsif(L<=100 && HC>L){       errmsg = "当L-LA-T-KC-2≤100时  校验HC≤L-LA-T-KC-2";       return errmsg;   }}return true;##脚本：ZA≤LA-HA_2-2let errmsg = nil;if(ZA!= nil && LA!= nil){   ZA=decimal(ZA);   LA=decimal(LA);   let LA=LA-HA_2-2;   if(ZA<=LA){       return true;   }else{       errmsg = "需满足公式 ZA≤LA-HA_2-2";       return errmsg;   }}return true;##脚本：HA_2≤LA-KA-2let errmsg = nil;if(HA_2!= nil && LA!= nil && KA!= nil){   HA_2=decimal(HA_2);   LA=decimal(LA);   KA=decimal(KA);   let LA=LA-KA-2;   if(HA_2<=LA){       return true;   }else{       errmsg = "HA的值必须处于 3 - 100范围内，才能生成型号";       return errmsg;   }}return true;##脚本：TA≤LA-3let errmsg = nil;if(TA!= nil && LA!= nil){   TA=decimal(TA);   LA=decimal(LA);   let LA=LA-3;   if(TA<=LA){       return true;   }else{       errmsg = "需满足公式 TA≤LA-3";       return errmsg;   }}return true;##脚本：SA≤LA-l1fn getConstant(D) {  let l=0;  D=decimal(D);  if(D==8 && D==10){    l=8;    return l;  }elsif(12<=D && D<= 25){    l=10;    return l;  }elsif( 30<=D && D<= 35){    l=15;    return l;  }elsif( 40<=D && D<= 50){     l=20;     return l;  }  return l;}let a=seq.list("12A");let b=seq.list("17A");let errmsg = nil;if(SA!= nil && LA!= nil && D!=nil){   SA=decimal(SA);   LA=decimal(LA);   let l=nil;   if(include(a,D)){        l=12;   }elsif(include(b,D)){        l=17;   }else{        l=getConstant(D);   }   let LA=LA-l;   if(SA<=LA){       return true;   }else{       errmsg = "需满足公式 SA≤LA-l";       return errmsg;   }}return true;##脚本：SB≤L-LA-T-l1fn getConstant(D) {  let l=0;  D=decimal(D);  if(D==8 && D==10){    l=8;    return l;  }elsif(12<=D && D<= 25){    l=10;    return l;  }elsif( 30<=D && D<= 35){    l=15;    return l;  }elsif( 40<=D && D<= 50){     l=20;     return l;  }  return l;}let a=seq.list("12A");let b=seq.list("17A");let errmsg = nil;if(SB!= nil && L!= nil && LA!= nil && T!= nil && D!=nil){   SB=decimal(SB);   L=decimal(L);   LA=decimal(LA);   T=decimal(T);   let l=nil;   if(include(a,D)){        l=12;   }elsif(include(b,D)){        l=17;   }else{        l=getConstant(D);   }   let L=L-LA-T-l;   if(SB<=L){       return true;   }else{       errmsg = "需满足公式 SB≤L-LA-T-l1";       return errmsg;   }}return true;##脚本：WA≤LA-GAlet errmsg = nil;if(WA!= nil && LA!= nil && GA!= nil){   WA=decimal(WA);   LA=decimal(LA);   GA=decimal(GA);   let LA=LA-GA;   if(WA<=LA){       return true;   }else{       errmsg = "需满足公式 WA≤LA-GA";       return errmsg;   }}return true;##脚本：GA≤LA-WAlet errmsg = nil;if(GA!= nil && LA!= nil && WA!= nil){   GA=decimal(GA);   LA=decimal(LA);   WA=decimal(WA);   let LA=LA-WA;   if(GA<=LA){       return true;   }else{       errmsg = "需满足公式 GA≤LA-WA";       return errmsg;   }}return true;##脚本：WB≤L-LA-T-GBlet errmsg = nil;if(WB!= nil && L!= nil && LA!= nil && T!= nil && GB!= nil){   WB=decimal(WB);   L=decimal(L);   LA=decimal(LA);   T=decimal(T);   GB=decimal(GB);   let L=L-LA-T-GB;   if(WB<=L){       return true;   }else{       errmsg = "需满足公式 WB≤L-LA-T-GB";       return errmsg;   }}return true;##脚本：GB≤L-LA-T-WBlet errmsg = nil;if(GB!= nil && L!= nil && LA!= nil && T!= nil && WB!= nil){   GB=decimal(GB);   L=decimal(L);   LA=decimal(LA);   T=decimal(T);   WB=decimal(WB);   let L=L-LA-T-WB;   if(GB<=L){       return true;   }else{       errmsg = "需满足公式 GB≤L-LA-T-WB";       return errmsg;   }}return true;