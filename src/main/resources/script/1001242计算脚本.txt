let p = productSearchSkuInfo;let list=p.specList;let D=specType;let scMax = nil;let lMin = nil;let newL=nil;## 输入型遍历检查-判断是否存在fn  inputInspection (attrSpec,value){     for m in attrSpec {        if(m.enSpecName==value){            return true;        }     }    return false;}## 根据情况改变最大值fn  changeMaximum(scMax,list,value,flag){    if(scMax==nil){        return false;    }    if(type(scMax)=="long" || type(scMax)=="string"){        scMax=decimal(scMax);    }    for m in list {        for n in m.specRangeList {            if(m.enSpecName == value){                ## 标品计算                if(flag){                    if(scMax <= n.maxValue && scMax >= n.minValue){                        n.maxValue = scMax;                    }                ## 非标品计算                }else{                    if(scMax <= n.maxValue && scMax >= n.minValue){                        n.maxValue = scMax;                ## 最大范围超限制                    }elsif(scMax < n.minValue){                        n.maxValue = 0M;                    }                }            }        }    }}## 改变属性的最小值fn  changeMinimum(lMin,list,value,flag){    if(lMin==nil || lMin < 0){        return false;    }    if(type(lMin)=="long" || type(lMin)=="string"){        lMin=decimal(lMin);    }    for m in list {        for n in m.specRangeList {            if(m.enSpecName == value){                if(flag){                    if(lMin >= n.minValue && lMin <= n.maxValue){                        n.minValue = lMin;                    }                }            }        }    }}## 特殊最大值负值处理fn  changeParticular(scMax,list,value){    if(scMax==nil){        return false;    }    if(type(scMax)=="long" || type(scMax)=="string"){        scMax=decimal(scMax);    }    for m in list {        for n in m.specRangeList {            if(m.enSpecName == value){                n.maxValue = scMax;            }        }    }}## 删除点选的值的范围fn removeValue(saveValue,list,value,flag){    ## 筛选对应的需要消除的点选集合    let new_delete_list=seq.list();    for m in list {        ## 遍历属性集合        if(m.enSpecName==value){            for x in m.specValueList{                if (x.specValue==nil){                    return false;                }                ## 删大于                let compareValue= decimal(x.specValue);                if(flag){                    if(compareValue > saveValue){                        seq.add(new_delete_list,x);                    }                ## 删小于                }else{                    if(compareValue < saveValue){                        seq.add(new_delete_list,x);                    }                }            }            ## 遍历可删除集合，从该属性的点选集合中删除该元素            for q in new_delete_list{                seq.remove(m.specValueList, q);            }        }    }}## 遍历获取对应的值fn  fetchValue(newObject,value){    let newValue=0M;    if(newObject==nil){        return newValue;    }    for m in newObject {        if(m.enSpecName==value){            newValue= decimal(m.attrSpecValue);        }     }    return newValue;}fn getConstant(D) {  let l=0;  D=decimal(D);  if(D==8 && D==10){    l=8;    return l;  }elsif(12<=D && D<= 25){    l=10;    return l;  }elsif( 30<=D && D<= 35){    l=15;    return l;  }elsif( 40<=D && D<= 50){     l=20;     return l;  }  return l;}let a=seq.list("12A");let b=seq.list("17A");##脚本：MA≤LA-2##脚本：MSA≤LA-2##脚本：MMA≤LA-2if(inputInspection(attrSpec,"LA")){    let LA=fetchValue(attrSpec,"LA");    LA=LA-2;    changeMaximum(LA,list,"MA",true);    changeMaximum(LA,list,"MSA",true);    changeMaximum(LA,list,"MMA",true);}##脚本：KA≤LA-HA-2if(inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"HA")){    let LA=fetchValue(attrSpec,"LA");    let HA=fetchValue(appendSpec,"HA");    LA=LA-HA-2;    changeMaximum(LA,list,"KA",true);}##脚本：HA≤LA-KA-2if(inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"KA")){    let LA=fetchValue(attrSpec,"LA");    let KA=fetchValue(appendSpec,"KA");    LA=LA-KA-2;    changeMaximum(LA,list,"HA",true);}##脚本：KB≤L-LA-T-HB-2if(inputInspection(attrSpec,"L") && inputInspection(attrSpec,"LA")  && inputInspection(genSpec,"T") && inputInspection(appendSpec,"HB")){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let T=fetchValue(genSpec,"T");    let HB=fetchValue(appendSpec,"HB");    L=L-LA-T-HB-2;    changeMaximum(L,list,"KB",true);}##脚本：复合公式1 HBif(inputInspection(attrSpec,"L") && inputInspection(attrSpec,"LA")  && inputInspection(genSpec,"T") && inputInspection(appendSpec,"KB")){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let T=fetchValue(genSpec,"T");    let KB=fetchValue(appendSpec,"KB");    L=L-LA-T-KB-1;    if(L>100){        changeMaximum(100,list,"HB",true);    }elsif(L<=100){        changeMaximum(L,list,"HB",true);    }}##脚本：KC≥KB+HB+2if(inputInspection(appendSpec,"KB") && inputInspection(appendSpec,"HB")){    let KB=fetchValue(appendSpec,"KB");    let HB=fetchValue(appendSpec,"HB");    KB=KB+HB+2;    changeMinimum(KB,list,"KC",true);}##脚本：KC≤L-T-LA-HC-2if(inputInspection(attrSpec,"L") && inputInspection(attrSpec,"LA")  && inputInspection(genSpec,"T") && inputInspection(appendSpec,"HC")){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let T=fetchValue(genSpec,"T");    let HC=fetchValue(appendSpec,"HC");    L=L-T-LA-HC-2;    changeMaximum(L,list,"KC",true);}##脚本：复合公式 HCif(inputInspection(attrSpec,"L") && inputInspection(attrSpec,"LA")  && inputInspection(genSpec,"T") && inputInspection(appendSpec,"KC")){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let T=fetchValue(genSpec,"T");    let KC=fetchValue(appendSpec,"KC");    L=L-LA-T-KC-2;    if(L>100){        changeMaximum(100,list,"HC",true);    }elsif(L<=100){        changeMaximum(L,list,"HC",true);    }}##脚本：ZA≤LA-HA_2-2if(inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"HA_2")){    let LA=fetchValue(attrSpec,"LA");    let HA_2=fetchValue(appendSpec,"HA_2");    LA=LA-HA_2-2;    changeMaximum(LA,list,"ZA",true);}##脚本：HA_2≤LA-KA-2if(inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"KA")){    let LA=fetchValue(attrSpec,"LA");    let KA=fetchValue(appendSpec,"KA");    LA=LA-KA-2;    changeMaximum(LA,list,"HA_2",true);}##脚本：TA≤LA-3if(inputInspection(attrSpec,"LA")){    let LA=fetchValue(attrSpec,"LA");    LA=LA-3;    changeMaximum(LA,list,"TA",true);}##脚本：SA≤LA-l1if(inputInspection(attrSpec,"LA") && D!=nil){    let LA=fetchValue(attrSpec,"LA");    let l=nil;    if(include(a,D)){        l=12;    }elsif(include(b,D)){        l=17;    }else{        l=getConstant(D);    }    LA=LA-l;    changeMaximum(LA,list,"SA",true);}##脚本：SB≤L-LA-T-l1if(inputInspection(attrSpec,"L") && inputInspection(attrSpec,"LA") && inputInspection(genSpec,"T") && D!=nil){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let T=fetchValue(genSpec,"T");    let l=nil;    if(include(a,D)){        l=12;    }elsif(include(b,D)){        l=17;    }else{        l=getConstant(D);    }    L=L-LA-T-l;    changeMaximum(L,list,"SB",true);}##脚本：WA≤LA-GAif(inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"GA")){    let LA=fetchValue(attrSpec,"LA");    let GA=fetchValue(attrSpec,"GA");    LA=LA-GA;    changeMaximum(LA,list,"WA",true);}##脚本：GA≤LA-WAif(inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"WA")){    let LA=fetchValue(attrSpec,"LA");    let WA=fetchValue(attrSpec,"WA");    LA=LA-WA;    changeMaximum(LA,list,"GA",true);}##脚本：WB≤L-LA-T-GBif(inputInspection(attrSpec,"L") && inputInspection(attrSpec,"LA") && inputInspection(genSpec,"T") && inputInspection(appendSpec,"GB")){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let T=fetchValue(genSpec,"T");    let GB=fetchValue(appendSpec,"GB");    L=L-LA-T-GB;    changeMaximum(L,list,"WB",true);}##脚本：GB≤L-LA-T-WBif(inputInspection(attrSpec,"L") && inputInspection(attrSpec,"LA") && inputInspection(genSpec,"T") && inputInspection(appendSpec,"WB")){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let T=fetchValue(genSpec,"T");    let WB=fetchValue(appendSpec,"WB");    L=L-LA-T-WB;    changeMaximum(L,list,"GB",true);}##脚本：HB_2≤L-T-LA-ZB-2if(inputInspection(attrSpec,"L") && inputInspection(genSpec,"T")  && inputInspection(attrSpec,"LA")  && inputInspection(appendSpec,"ZB") ){    let L=fetchValue(attrSpec,"L");    let T=fetchValue(genSpec,"T");    let LA=fetchValue(attrSpec,"LA");    let ZB=fetchValue(appendSpec,"ZB");    L=L-T-LA-ZB-2;    changeMaximum(L,list,"HB_2",true);}##脚本：HB≤KC-KB-2if(inputInspection(appendSpec,"KC") && inputInspection(appendSpec,"KB") ){    let KC=fetchValue(appendSpec,"KC");    let KB=fetchValue(appendSpec,"KB");    KC=KC-KB-2;    changeMaximum(KC,list,"HB",true);}##脚本：KB≤KC-HB-2if(inputInspection(appendSpec,"KC") && inputInspection(appendSpec,"HB") ){    let KC=fetchValue(appendSpec,"KC");    let HB=fetchValue(appendSpec,"HB");    KC=KC-HB-2;    changeMaximum(KC,list,"KB",true);}##脚本：HB≤KC-KB-2if(inputInspection(appendSpec,"KC") && inputInspection(appendSpec,"KB") ){    let KC=fetchValue(appendSpec,"KC");    let KB=fetchValue(appendSpec,"KB");    KC=KC-KB-2;    changeMaximum(KC,list,"HB",true);}##脚本：KB≤KC-HB-2if(inputInspection(appendSpec,"KC") && inputInspection(appendSpec,"HB") ){    let KC=fetchValue(appendSpec,"KC");    let HB=fetchValue(appendSpec,"HB");    KC=KC-HB-2;    changeMaximum(KC,list,"KB",true);}##脚本：HB_2≤ZC-ZB-2if(inputInspection(appendSpec,"ZC") && inputInspection(appendSpec,"ZB") ){    let ZC=fetchValue(appendSpec,"ZC");    let ZB=fetchValue(appendSpec,"ZB");    ZC=ZC-ZB-2;    changeMaximum(ZC,list,"HB_2",true);}##脚本：ZB≤ZC-HB_2-2if(inputInspection(appendSpec,"ZC") && inputInspection(appendSpec,"HB_2") ){    let ZC=fetchValue(appendSpec,"ZC");    let HB_2=fetchValue(appendSpec,"HB_2");    ZC=ZC-HB_2-2;    changeMaximum(ZC,list,"ZB",true);}##脚本：HC_2≤L-ZC-2if(inputInspection(attrSpec,"L") && inputInspection(appendSpec,"ZC") ){    let L=fetchValue(attrSpec,"L");    let ZC=fetchValue(appendSpec,"ZC");    L=L-ZC-2;    changeMaximum(L,list,"HC_2",true);}##脚本：TB≤LB-3if(inputInspection(attrSpec,"LB")){    let LB=fetchValue(attrSpec,"LB");    LB=LB-3;    changeMaximum(LB,list,"TB",true);}return p;