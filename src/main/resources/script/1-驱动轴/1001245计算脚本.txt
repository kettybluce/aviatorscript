let p = productSearchSkuInfo;let list=p.specList;let D=specType;let scMax = nil;let lMin = nil;let newL=nil;## 输入型遍历检查-判断是否存在fn  inputInspection (attrSpec,value){     for m in attrSpec {        if(m.enSpecName==value){            return true;        }     }    return false;}## 根据情况改变最大值fn  changeMaximum(scMax,list,value,flag){    if(scMax==nil){        return false;    }    if(type(scMax)=="long" || type(scMax)=="string"){        scMax=decimal(scMax);    }    for m in list {        for n in m.specRangeList {            if(m.enSpecName == value){                ## 标品计算                if(flag){                    if(scMax <= n.maxValue && scMax >= n.minValue){                        n.maxValue = scMax;                    }                ## 非标品计算                }else{                    if(scMax <= n.maxValue && scMax >= n.minValue){                        n.maxValue = scMax;                ## 最大范围超限制                    }elsif(scMax < n.minValue){                        n.maxValue = 0M;                    }                }            }        }    }}## 改变属性的最小值fn  changeMinimum(lMin,list,value,flag){    if(lMin==nil || lMin < 0){        return false;    }    if(type(lMin)=="long" || type(lMin)=="string"){        lMin=decimal(lMin);    }    for m in list {        for n in m.specRangeList {            if(m.enSpecName == value){                if(flag){                    if(lMin >= n.minValue && lMin <= n.maxValue){                        n.minValue = lMin;                    }                }            }        }    }}## 特殊最大值负值处理fn  changeParticular(scMax,list,value){    if(scMax==nil){        return false;    }    if(type(scMax)=="long" || type(scMax)=="string"){        scMax=decimal(scMax);    }    for m in list {        for n in m.specRangeList {            if(m.enSpecName == value){                n.maxValue = scMax;            }        }    }}## 删除点选的值的范围fn removeValue(saveValue,list,value,flag){    ## 筛选对应的需要消除的点选集合    let new_delete_list=seq.list();    for m in list {        ## 遍历属性集合        if(m.enSpecName==value){            for x in m.specValueList{                if (x.specValue==nil){                    return false;                }                ## 删大于                let compareValue= decimal(x.specValue);                if(flag){                    if(compareValue > saveValue){                        seq.add(new_delete_list,x);                    }                ## 删小于                }else{                    if(compareValue < saveValue){                        seq.add(new_delete_list,x);                    }                }            }            ## 遍历可删除集合，从该属性的点选集合中删除该元素            for q in new_delete_list{                seq.remove(m.specValueList, q);            }        }    }}## 遍历获取对应的值fn  fetchValue(newObject,value){    let newValue=0M;    if(newObject==nil){        return newValue;    }    for m in newObject {        if(m.enSpecName==value){            newValue= decimal(m.attrSpecValue);        }     }    return newValue;}## LA≤L/2if(inputInspection(attrSpec,"L")){    let L=fetchValue(attrSpec,"L");    L=L/2;    changeMaximum(L,list,"LA",true);}## MA≤LA-2if(inputInspection(attrSpec,"LA")){    let LA=fetchValue(attrSpec,"LA");    LA=LA-2;    changeMaximum(LA,list,"MA",true);}## MSA≤LA-2if(inputInspection(attrSpec,"LA")){    let LA=fetchValue(attrSpec,"LA");    LA=LA-2;    changeMaximum(LA,list,"MSA",true);}## MMA≤LA-2if(inputInspection(attrSpec,"LA")){    let LA=fetchValue(attrSpec,"LA");    LA=LA-2;    changeMaximum(LA,list,"MMA",true);}## MD≤D×5if(D!=nil){    D=decimal(D);    let newD=D*5;    changeMaximum(newD,list,"MD",true);}## MSD≤D×5if(D!=nil){    D=decimal(D);    let newD=D*5;    changeMaximum(newD,list,"MSD",true);}## MMD≤D×5if(D!=nil){    D=decimal(D);    let newD=D*5;    changeMaximum(newD,list,"MMD",true);}## MB≤LA-2if(inputInspection(attrSpec,"LA")){    let LA=fetchValue(attrSpec,"LA");    LA=LA-2;    changeMaximum(LA,list,"MB",true);}## MSB≤LA-2if(inputInspection(attrSpec,"LA")){    let LA=fetchValue(attrSpec,"LA");    LA=LA-2;    changeMaximum(LA,list,"MSB",true);}## NA≤P-4## NB≤D-4if(inputInspection(attrSpec,"P")){    let P=fetchValue(attrSpec,"P");    P=P-4;    P = P < 3M ? 3M : P;    removeValue(P,list,"NA",true);}if(D!=nil){    D=decimal(D);    let newD=D-4;    newD = newD < 3M ? 3M : newD;    removeValue(newD,list,"NB",true);}## KA≤LA-HA-2if(inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"HA")){    let LA=fetchValue(attrSpec,"LA");    let HA=fetchValue(appendSpec,"HA");    LA=LA-HA-2;    changeMaximum(LA,list,"KA",true);}## HA≤LA-1if(inputInspection(attrSpec,"LA")){    let LA=fetchValue(attrSpec,"LA");    LA=LA-1;    changeMaximum(LA,list,"HA",true);}## HA≤LA-KA-2if(inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"KA")){    let LA=fetchValue(attrSpec,"LA");    let KA=fetchValue(appendSpec,"KA");    LA=LA-KA-2;    changeMaximum(LA,list,"HA",true);}## KB≤L-LA-HBif(inputInspection(attrSpec,"L")&& inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"HB")){    let LA=fetchValue(attrSpec,"LA");    let L=fetchValue(attrSpec,"L");    let HB=fetchValue(appendSpec,"HB");    L=L-LA-HB;    changeMaximum(L,list,"KB",true);}## KB≤L-LA-HC-HB-3if(inputInspection(attrSpec,"L")&& inputInspection(appendSpec,"LA")&& inputInspection(appendSpec,"HC") && inputInspection(appendSpec,"HB")){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let HC=fetchValue(appendSpec,"HC");    let HB=fetchValue(appendSpec,"HB");    L=L-LA-HC-HB-3;    changeMaximum(L,list,"KB",true);}## KB≤KC-HB-1if(inputInspection(appendSpec,"KC") && inputInspection(appendSpec,"HB")){    let KC=fetchValue(appendSpec,"KC");    let HB=fetchValue(appendSpec,"HB");    L=KC-HB-1;    changeMaximum(L,list,"KB",true);}## HB≤L-LA-KBif(inputInspection(attrSpec,"L")&& inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"KB")){    let LA=fetchValue(attrSpec,"LA");    let L=fetchValue(attrSpec,"L");    let KB=fetchValue(appendSpec,"KB");    L=L-LA-KB;    changeMaximum(L,list,"HB",true);}## HB≤L-LA-HC-KB-3if(inputInspection(attrSpec,"L")&& inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"HC")&& inputInspection(appendSpec,"KB")){    let LA=fetchValue(attrSpec,"LA");    let L=fetchValue(attrSpec,"L");    let HC=fetchValue(appendSpec,"HC");    let KB=fetchValue(appendSpec,"KB");    L=L-LA-HC-KB-3;    changeMaximum(L,list,"HB",true);}## HB≤KC-KB-1if( inputInspection(appendSpec,"KC")&& inputInspection(appendSpec,"KB")){    let KC=fetchValue(appendSpec,"KC");    let KB=fetchValue(appendSpec,"KB");    L=KC-KB-1;    changeMaximum(L,list,"HB",true);}## HB+KB+1≤ KC ≤L-LA-HCif( inputInspection(appendSpec,"KB") && inputInspection(appendSpec,"HB")){    let KB=fetchValue(appendSpec,"KB");    let HB=fetchValue(appendSpec,"HB");    HB=HB+KB+1;    changeMinimum(HB,list,"KC",true);}if(inputInspection(attrSpec,"L")&& inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"HC")){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let HC=fetchValue(appendSpec,"HC");    L=L-LA-HC;    changeMaximum(L,list,"KC",true);}## HC ≤L-LA-KCif(inputInspection(attrSpec,"L")&& inputInspection(attrSpec,"LA")&& inputInspection(appendSpec,"KC")){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let KC=fetchValue(appendSpec,"KC");    L=L-LA-KC;    changeMaximum(L,list,"HC",true);}## HC≤L-LA-HB-KB-2if(inputInspection(attrSpec,"L")&& inputInspection(attrSpec,"LA")&& inputInspection(appendSpec,"HB")&& inputInspection(appendSpec,"KB")){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let HB=fetchValue(appendSpec,"HB");    let KB=fetchValue(appendSpec,"KB");    L=L-LA-HB-KB-2;    changeMaximum(L,list,"HC",true);}## HA_2 ≤LA-1if( inputInspection(attrSpec,"LA")){    let LA=fetchValue(attrSpec,"LA");    L=LA-1;    changeMaximum(L,list,"HA_2",true);}## TA ≤LA-3if( inputInspection(attrSpec,"LA")){    let LA=fetchValue(attrSpec,"LA");    L=LA-3;    changeMaximum(L,list,"TA",true);}## SC ≤L-LA-l1fn getConstant(D) {  let l=0;  D=decimal(D);  if(D==10){    l=8;    return l;  }elsif(12<=D && D<= 25){    l=10;    return l;  }elsif( 30<=D && D<= 35){    l=15;    return l;  }elsif( 40<=D && D<= 50){     l=20;     return l;  }  return l;}if(inputInspection(attrSpec,"L") && inputInspection(attrSpec,"LA") && D !=nil){    let l1=getConstant(D);    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    L=L-LA-l1;    changeMaximum(L,list,"SC",true);}## WA ≤ LA-GA-2if( inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"GA") ){    let LA=fetchValue(attrSpec,"LA");    let GA=fetchValue(appendSpec,"GA");    LA=LA-GA-2;    changeMaximum(LA,list,"WA",true);}## GA ≤ LA-WA-2if( inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"WA") ){    let LA=fetchValue(attrSpec,"LA");    let WA=fetchValue(appendSpec,"WA");    LA=LA-WA-2;    changeMaximum(LA,list,"GA",true);}## WB ≤ L-LA-GBif(inputInspection(attrSpec,"L") &&  inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"GB") ){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let GB=fetchValue(appendSpec,"GB");    L=L-LA-GB;    changeMaximum(L,list,"WB",true);}## GB ≤ L-LA-WBif(inputInspection(attrSpec,"L") &&  inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"WB") ){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let WB=fetchValue(appendSpec,"WB");    L=L-LA-WB;    changeMaximum(L,list,"GB",true);}## WB+GB+1 ≤ WCif(inputInspection(appendSpec,"WB") &&  inputInspection(appendSpec,"GB")){    let WB=fetchValue(appendSpec,"WB");    let GB=fetchValue(appendSpec,"GB");    WB=WB+GB+1;    changeMinimum(WB,list,"WC",true);}## WC ≤L-LA-GCif(inputInspection(attrSpec,"L") &&  inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"GC") ){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let GC=fetchValue(appendSpec,"GC");    L=L-LA-GC;    changeMaximum(L,list,"WC",true);}## GC ≤L-LA-WCif(inputInspection(attrSpec,"L") &&  inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"WC") ){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let WC=fetchValue(appendSpec,"WC");    L=L-LA-WC;    changeMaximum(L,list,"GC",true);}return p;