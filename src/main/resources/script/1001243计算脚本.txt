let p = productSearchSkuInfo;let list=p.specList;let D=specType;let scMax = nil;let lMin = nil;let newL=nil;## 输入型遍历检查-判断是否存在fn  inputInspection (attrSpec,value){     for m in attrSpec {        if(m.enSpecName==value){            return true;        }     }    return false;}## 根据情况改变最大值fn  changeMaximum(scMax,list,value,flag){    if(scMax==nil){        return false;    }    if(type(scMax)=="long" || type(scMax)=="string"){        scMax=decimal(scMax);    }    for m in list {        for n in m.specRangeList {            if(m.enSpecName == value){                ## 标品计算                if(flag){                    if(scMax <= n.maxValue && scMax >= n.minValue){                        n.maxValue = scMax;                    }                ## 非标品计算                }else{                    if(scMax <= n.maxValue && scMax >= n.minValue){                        n.maxValue = scMax;                ## 最大范围超限制                    }elsif(scMax < n.minValue){                        n.maxValue = 0M;                    }                }            }        }    }}## 改变属性的最小值fn  changeMinimum(lMin,list,value,flag){    if(lMin==nil || lMin < 0){        return false;    }    if(type(lMin)=="long" || type(lMin)=="string"){        lMin=decimal(lMin);    }    for m in list {        for n in m.specRangeList {            if(m.enSpecName == value){                if(flag){                    if(lMin >= n.minValue && lMin <= n.maxValue){                        n.minValue = lMin;                    }                }            }        }    }}## 特殊最大值负值处理fn  changeParticular(scMax,list,value){    if(scMax==nil){        return false;    }    if(type(scMax)=="long" || type(scMax)=="string"){        scMax=decimal(scMax);    }    for m in list {        for n in m.specRangeList {            if(m.enSpecName == value){                n.maxValue = scMax;            }        }    }}## 删除点选的值的范围fn removeValue(saveValue,list,value,flag){    ## 筛选对应的需要消除的点选集合    let new_delete_list=seq.list();    for m in list {        ## 遍历属性集合        if(m.enSpecName==value){            for x in m.specValueList{                if (x.specValue==nil){                    return false;                }                ## 删大于                let compareValue= decimal(x.specValue);                if(flag){                    if(compareValue > saveValue){                        seq.add(new_delete_list,x);                    }                ## 删小于                }else{                    if(compareValue < saveValue){                        seq.add(new_delete_list,x);                    }                }            }            ## 遍历可删除集合，从该属性的点选集合中删除该元素            for q in new_delete_list{                seq.remove(m.specValueList, q);            }        }    }}## 遍历获取对应的值fn  fetchValue(newObject,value){    let newValue=0M;    if(newObject==nil){        return newValue;    }    for m in newObject {        if(m.enSpecName==value){            newValue= decimal(m.attrSpecValue);        }     }    return newValue;}fn getConstant(D) {  let l=0;  D=decimal(D);  if(D==10){    l=8;    return l;  }elsif(12<=D && D<= 25){    l=10;    return l;  }elsif( 30<=D && D<= 35){    l=15;    return l;  }elsif( 40<=D && D<= 50){    l=20;    return l;  }  return l;}##脚本：L>LA+LB+LCif(inputInspection(attrSpec,"LA") && inputInspection(attrSpec,"LB") && inputInspection(attrSpec,"LC")){    let LA=fetchValue(attrSpec,"LA");    let LB=fetchValue(attrSpec,"LB");    let LC=fetchValue(attrSpec,"LC");    LA=LA+LB+LC;    changeMaximum(LA,list,"L",true);}##脚本：MA≤LA-2##脚本：MSA≤LA-2##脚本：MMA≤LA-2if(inputInspection(attrSpec,"LA")){    let LA=fetchValue(attrSpec,"LA");    LA=LA-2;    changeMaximum(LA,list,"MA",true);    changeMaximum(LA,list,"MSA",true);    changeMaximum(LA,list,"MMA",true);}##脚本：MC≤LC-2##脚本：MSC≤LC-2##脚本：MMC≤LC-2if(inputInspection(attrSpec,"LC")){    let LA=fetchValue(attrSpec,"LC");    LC=LC-2;    changeMaximum(LC,list,"MC",true);    changeMaximum(LC,list,"MSC",true);    changeMaximum(LC,list,"MMC",true);}##脚本：MB≤LB-2##脚本：MSB≤LB-2##脚本：MMB≤LB-2if(inputInspection(attrSpec,"LB")){    let LA=fetchValue(attrSpec,"LB");    LB=LB-2;    changeMaximum(LB,list,"MB",true);    changeMaximum(LB,list,"MSB",true);    changeMaximum(LB,list,"MMB",true);}##脚本：KA≤LA-HA-2if(inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"HA")){    let LA=fetchValue(attrSpec,"LA");    let HA=fetchValue(appendSpec,"HA");    LA=LA-HA-2;    changeMaximum(LA,list,"KA",true);}##脚本：HA≤LA-KA-2if(inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"HA")){    let LA=fetchValue(attrSpec,"LA");    let HA=fetchValue(appendSpec,"HA");    LA=LA-HA-2;    changeMaximum(LA,list,"HA",true);}##脚本：HA≤LA-1if(inputInspection(attrSpec,"LA") ){    let LA=fetchValue(attrSpec,"LA");    LA=LA-1;    changeMaximum(LA,list,"HA",true);}##脚本：KB≤L-LB-LA-LC-HBif(inputInspection(attrSpec,"L") && inputInspection(attrSpec,"LB")  && inputInspection(attrSpec,"LA") && inputInspection(attrSpec,"LC") && inputInspection(appendSpec,"HB")){    let L=fetchValue(attrSpec,"L");    let LB=fetchValue(attrSpec,"LB");    let LA=fetchValue(attrSpec,"LA");    let LC=fetchValue(attrSpec,"LC");    let HB=fetchValue(appendSpec,"HB");    L=L-LB-LA-LC-HB;    changeMaximum(L,list,"KB",true);}##脚本：KB≤KD-HB-1##脚本：HB≤L-LB-LA-LC-KB##脚本：KC≤LC-HC-2##脚本：HC≤LC-KC-2##脚本：KD≤L-LA-LC-LB-HD-2##脚本：KD≥KB+HB+1##脚本：HD≤L-LA-LB-LC-KD-2##脚本：ZA≤LA-HA_2-2##脚本：HA_2≤LA-ZA-2##脚本：HA_2≤LA-1##脚本：ZB≤L-LA-LB-LC-HB_2##脚本：ZB≤ZD-HB_2-1##脚本：HB_2≤L-LA-LB-LC-KB##脚本：HB_2≤ZD-KB-1##脚本：ZC≤ZD-1-HC_2##脚本：HC_2≤ZD-ZC-1##脚本：ZD≤L-LA-LB-LC-HD_2##脚本：ZD≥ZC+HC_2+1##脚本：HD≤L-LA-LB-LC-ZD##脚本：TA≤LA-3##脚本：TB≤LB-3##脚本：TC≤LC-3##脚本：SA≤LA-l1##脚本：SD≤L-LA-LB-LC-l1##脚本：SC≤LC-l1##脚本：WA≤LA-GA##脚本：GA≤LA-WA##脚本：WC≤LC-GC##脚本：GC≤LC-WC##脚本：WD≤L-LA-LB-LC-GD##脚本：GD≤L-LA-LC-LB-WB## NA,NC≤P(Q)-4if(inputInspection(genSpec,"P")){    let P=fetchValue(genSpec,"P");    P=P-4;    P = P < 3M ? 3M : P;    removeValue(P,list,"NA",true);    removeValue(P,list,"NC",true);}if(inputInspection(attrSpec,"Q")){    let Q=fetchValue(attrSpec,"Q");    Q=Q-4;    Q = Q < 3M ? 3M : Q;    removeValue(Q,list,"NA",true);    removeValue(Q,list,"NC",true);}return p;