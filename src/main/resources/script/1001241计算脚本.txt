let p = productSearchSkuInfo;let list=p.specList;let D=specType;let scMax = nil;let lMin = nil;let newL=nil;## 输入型遍历检查-判断是否存在fn  inputInspection (attrSpec,value){     for m in attrSpec {        if(m.enSpecName==value){            return true;        }     }      return false;}## 根据情况改变最大值fn  changeMaximum(scMax,list,value,flag){    for m in list {        for n in m.specRangeList {            if(m.enSpecName == value){                if(scMax!=nil && flag){                    if(scMax<n.maxValue){                        n.maxValue = scMax;                    }                }else{                   scMax= scMax-n.stepValue;                    if(scMax<n.maxValue){                        n.maxValue = scMax;                    }                }            }        }    }}## 改变属性的最小值fn  changeMinimum(lMin,list,value,flag){    for m in list {        for n in m.specRangeList {            if(m.enSpecName == value){                if(lMin!=nil && flag){                    if(lMin>n.minValue){                        n.minValue = lMin;                    }                }else{                 lMin=lMin+n.stepValue;                    if(lMin>n.minValue){                        n.minValue = lMin;                    }                }            }        }    }}## 删除点选的值的范围fn removeValue(saveValue,list,value,flag){    ## 筛选对应的需要消除的点选集合    let new_delete_list=seq.list();    for m in list {        ## 遍历属性集合        if(m.enSpecName==value){            for x in m.specValueList{                ## 删大于                let compareValue= long(x.specValue);                if(flag){                    if(compareValue > saveValue){                        seq.add(new_delete_list,x);                    }                ## 删小于                }else{                    if(compareValue < saveValue){                        seq.add(new_delete_list,x);                    }                }            }            ## 遍历可删除集合，从该属性的点选集合中删除该元素            for q in new_delete_list{                seq.remove(m.specValueList, q);            }        }    }}## 遍历获取对应的值fn  fetchValue(attrSpec,value){    for m in attrSpec {        if(m.enSpecName==value){            return m.attrSpecValue;        }     }    return false;}## 获取当前spu的D轴径fn checkMap(D){    let newMap=seq.map("8",8,"10",10,"12",12,"12A",12,"15",15,"17",17,"17A",17,"20",20,"25",25,"30",30,"35",35,"40",40,"45",45);    let newData=nil;    for x in newMap {        if(D==x.key){        newData=x.value;        }    }    return newData;}## P获取常数项fn getConstantP(P) {  let  l=0;  if( 5<=P && P<= 10){    l=8;    return l;  }elsif(11<=P && P<= 25){    l=10;    return l;  }elsif( 26<=P && P<= 37){    l=15;    return l;  }elsif( 38<=P && P<= 48){     l=20;     return l;  }  return l;}## Q获取常数项fn getConstantQ(Q) {  let  l=0;  if( 5<=Q && Q<= 10){    l=8;    return l;  }elsif(11<=Q && Q<= 25){    l=10;    return l;  }elsif( 26<=Q && Q<= 37){    l=15;    return l;  }elsif( 38<=Q && Q<= 48){     l=20;     return l;  }  return l;}## L>=(LA+LB)*2if(inputInspection(attrSpec,"LA") && inputInspection(attrSpec,"LB")){    let LA=fetchValue(attrSpec,"LA");    let LB=fetchValue(attrSpec,"LB");    let L=(LA+LB)*2;    let flag=true;    changeMinimum(L,list,"L",flag);}## LA≤L/2-LBif(inputInspection(attrSpec,"L") && inputInspection(attrSpec,"LB")){    let L=fetchValue(attrSpec,"L");    let LB=fetchValue(attrSpec,"LB");    L=L/2;    L=L-LB;    let flag=true;    changeMaximum(L,list,"LA",flag);}## LB≤L/2-LAif(inputInspection(attrSpec,"L") && inputInspection(attrSpec,"LA")){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    L=L/2;    L=L-LA;    let flag=true;    changeMaximum(L,list,"LB",flag);}##  MA≦LA-2##  MSA≦LA-2##  MMA≦LA-2if(inputInspection(attrSpec,"LA")){    let LA=fetchValue(attrSpec,"LA");    LA=LA-2;    let flag=true;    changeMaximum(LA,list,"MA",flag);    changeMaximum(LA,list,"MSA",flag);    changeMaximum(LA,list,"MMA",flag);}## MB≦LB-2## MSB≦LB-2## MMB≦LB-2if(inputInspection(attrSpec,"LB")){    let LB=fetchValue(attrSpec,"LB");    LB=LB-2;    let flag=true;    changeMaximum(LB,list,"MB",flag);    changeMaximum(LB,list,"MSB",flag);    changeMaximum(LB,list,"MMB",flag);}## MD 5≦MD≦D×5## 5≦MD≦L-LA-LB-T-2## 5≦MSD≦D×5## 5≦MSD≦L-LA-LB-T-2## 5≦MMD≦D×5## 5≦MMD≦L-LA-LB-T-2if(inputInspection(attrSpec,"L")&& inputInspection(attrSpec,"LA")&& inputInspection(attrSpec,"LB")&& inputInspection(attrSpec,"T")){    let D=checkMap(specType);    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let LB=fetchValue(attrSpec,"LB");    let T=fetchValue(attrSpec,"T");    L=L-LA-LB-T-2;    D=D*5;    let flag=true;    if(D<L){        changeMaximum(D,list,"MD",flag);        changeMaximum(D,list,"MSD",flag);        changeMaximum(D,list,"MMD",flag);    }else{        changeMaximum(L,list,"MD",flag);        changeMaximum(L,list,"MSD",flag);        changeMaximum(L,list,"MMD",flag);    }}## NA≦P-4## NB≦Q-4if(inputInspection(attrSpec,"P")){    let P=fetchValue(attrSpec,"P");    P=P-4;    let flag=true;    removeValue(P,list,"NA",flag);}if(inputInspection(attrSpec,"Q")){    let Q=fetchValue(attrSpec,"Q");    Q=Q-4;    let flag=true;    removeValue(Q,list,"NB",flag);}## KA≦LA-HA-2if(inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"HA")){    let LA=fetchValue(attrSpec,"LA");    let HA=fetchValue(appendSpec,"HA");    LA=LA-HA-2;    let flag=true;    changeMaximum(LB,list,"MSB",flag);}## HA≦LA-KA-2if(inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"KA")){    let LA=fetchValue(attrSpec,"LA");    let KA=fetchValue(attrSpec,"KA");    LA=LA-KA-2;    let flag=true;    changeMaximum(LA,list,"HA",flag);}## KB≦LB-HB-2if(inputInspection(attrSpec,"LB") && inputInspection(appendSpec,"HB")){    let LB=fetchValue(attrSpec,"LB");    let HB=fetchValue(appendSpec,"HB");    LB=LB-HB-2;    let flag=true;    changeMaximum(LB,list,"KB",flag);}## HB≦LB-KB-2if(inputInspection(attrSpec,"LB") && inputInspection(appendSpec,"KB")){    let LB=fetchValue(attrSpec,"LB");    let KB=fetchValue(appendSpec,"KB");    LB=LB-KB-2;    let flag=true;    changeMaximum(LB,list,"HB",flag);}## KC≦L-LA-LB-T-HC-2if(inputInspection(attrSpec,"L")&& inputInspection(attrSpec,"LA")&& inputInspection(attrSpec,"LB")&& inputInspection(attrSpec,"T")&& inputInspection(appendSpec,"HC")){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let LB=fetchValue(attrSpec,"LB");    let T=fetchValue(attrSpec,"T");    let HC=fetchValue(appendSpec,"HC");    L=L-LA-LB-T-HC-2;    let flag=true;    changeMaximum(L,list,"KC",flag);}## HC≦L-LA-LB-T-KC-2if(inputInspection(attrSpec,"L")&& inputInspection(attrSpec,"LA")&& inputInspection(attrSpec,"LB")&& inputInspection(attrSpec,"T")&& inputInspection(appendSpec,"KC")){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let LB=fetchValue(attrSpec,"LB");    let T=fetchValue(attrSpec,"T");    let KC=fetchValue(appendSpec,"KC");    L=L-LA-LB-T-KC-2;    let flag=true;    changeMaximum(L,list,"HC",flag);}## KC+HC+2≦KD≦L-LA-LB-T-HD-2if(inputInspection(attrSpec,"L")&& inputInspection(attrSpec,"LA")&& inputInspection(attrSpec,"LB")&& inputInspection(attrSpec,"T")){    let L=fetchValue(attrSpec,"L");    let LA=fetchValue(attrSpec,"LA");    let LB=fetchValue(attrSpec,"LB");    let T=fetchValue(attrSpec,"T");    newL=L-LA-LB-T;}if( inputInspection(appendSpec,"HD") && newL!=nil){    let HD=fetchValue(appendSpec,"HD");    newL=newL-HD-2;    let flag=true;    changeMaximum(newL,list,"KD",flag);}if(inputInspection(appendSpec,"KC")&& inputInspection(appendSpec,"HC")){    let KC=fetchValue(appendSpec,"KC");    let HC=fetchValue(appendSpec,"HC");    KC=KC+HC+2;    let flag=true;    changeMinimum(newL,list,"KD",flag);}## HD≦L-LA-LB-T-KD-2if(newL!=nil && inputInspection(appendSpec,"KD")){    let KD=fetchValue(appendSpec,"KD");    newL=newL-KD;    let flag=true;    changeMaximum(newL,list,"HD",flag);}## ZA≦LA-HA-2if(inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"HA")){    let LA=fetchValue(attrSpec,"LA");    let HA=fetchValue(appendSpec,"HA");    LA=LA-HA-2;    let flag=true;    changeMaximum(LA,list,"ZA",flag);}## HA≦LA-ZA-2if(inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"ZA")){    let LA=fetchValue(attrSpec,"LA");    let ZA=fetchValue(appendSpec,"ZA");    LA=LA-ZA-2;    let flag=true;    changeMaximum(LA,list,"HA",flag);}## ZB≦LB-HB-2if(inputInspection(attrSpec,"LB") && inputInspection(appendSpec,"HB")){    let LB=fetchValue(attrSpec,"LB");    let HB=fetchValue(appendSpec,"HB");    LB=LB-HB-2;    let flag=true;    changeMaximum(LB,list,"ZB",flag);}## HB≦LB-ZB-2if(inputInspection(attrSpec,"LB") && inputInspection(appendSpec,"ZB")){    let LB=fetchValue(attrSpec,"LB");    let ZB=fetchValue(appendSpec,"ZB");    LB=LB-ZB-2;    let flag=true;    changeMaximum(LB,list,"HB",flag);}## ZC≦L-LA-LB-T-HC-2if(newL!=nil && inputInspection(appendSpec,"HC")){    let HC=fetchValue(appendSpec,"HC");    newL=newL-HC-2;    let flag=true;    changeMaximum(newL,list,"ZC",flag);}## HC≦L-LA-LB-T-ZC-2if(newL!=nil && inputInspection(appendSpec,"ZC")){    let ZC=fetchValue(appendSpec,"ZC");    newL=newL-ZC-2;    let flag=true;    changeMaximum(newL,list,"HC",flag);}## ZC+HC+2≦ZD≦L-LA-LB-T-HD-2if( inputInspection(appendSpec,"HD") && newL!=nil){    let HD=fetchValue(appendSpec,"HD");    newL=newL-HD-2;    let flag=true;    changeMaximum(newL,list,"ZD",flag);}if(inputInspection(appendSpec,"ZC")&& inputInspection(appendSpec,"HC")){    let ZC=fetchValue(appendSpec,"ZC");    let HC=fetchValue(appendSpec,"HC");    KC=KC+HC+2;    let flag=true;    changeMinimum(newL,list,"KD",flag);}## HD≦L-LA-LB-T-ZD-2if(newL!=nil && inputInspection(appendSpec,"ZD")){    let ZD=fetchValue(appendSpec,"ZD");    newL=newL-ZD-2;    let flag=true;    changeMaximum(newL,list,"HD",flag);}## TA≦LA-3if(inputInspection(attrSpec,"LA")){    let LA=fetchValue(attrSpec,"LA");    LA=LA-3;    let flag=true;    changeMaximum(LA,list,"TA",flag);}## TB≦LB-3if(inputInspection(attrSpec,"LB")){    let LB=fetchValue(attrSpec,"LB");    LB=LB-3;    let flag=true;    changeMaximum(LB,list,"TB",flag);}## TD≦L-LA-LB-T-3if(newL!=nil){    let flag=true;    changeMaximum(newL,list,"TD",flag);}## WA≦LA-GA-2if(inputInspection(attrSpec,"LA") && inputInspection(appendSpec,"GA")){    let LA=fetchValue(attrSpec,"LA");    let GA=fetchValue(appendSpec,"GA");    LA=LA-GA-2;    let flag=true;    changeMaximum(LA,list,"WA",flag);}## ZB≦LB-HB-2if(inputInspection(attrSpec,"LB") && inputInspection(appendSpec,"HB")){    let LB=fetchValue(attrSpec,"LB");    let HB=fetchValue(appendSpec,"HB");    LB=LB-HB-2;    let flag=true;    changeMaximum(LB,list,"ZB",flag);}## HB≦LB-ZB-2if(inputInspection(attrSpec,"LB") && inputInspection(appendSpec,"ZB")){    let LB=fetchValue(attrSpec,"LB");    let ZB=fetchValue(appendSpec,"ZB");    LB=LB-ZB-2;    let flag=true;    changeMaximum(LB,list,"HB",flag);}## ZC≦L-LA-LB-T-HC-2if(newL!=nil && inputInspection(appendSpec,"HC")){    let HC=fetchValue(appendSpec,"HC");    newL=newL-HC-2;    let flag=true;    changeMaximum(newL,list,"ZC",flag);}## HC≦L-LA-LB-T-ZC-2if(newL!=nil && inputInspection(appendSpec,"ZC")){    let ZC=fetchValue(appendSpec,"ZC");    newL=newL-ZC-2;    let flag=true;    changeMaximum(newL,list,"HC",flag);}## ZC+HC+2≦ZD≦L-LA-LB-T-HD-2if(newL!=nil && inputInspection(appendSpec,"HD")){    let HD=fetchValue(appendSpec,"HD");    newL=newL-HD-2;    let flag=true;    changeMaximum(newL,list,"ZD",flag);}if(inputInspection(attrSpec,"ZC") && inputInspection(appendSpec,"HC")){    let ZC=fetchValue(attrSpec,"ZC");    let HC=fetchValue(appendSpec,"HC");    ZC=ZC+HC+2;    let flag=true;    changeMinimum(ZC,list,"ZD",flag);}## HD≦L-LA-LB-T-ZD-2if(newL!=nil && inputInspection(appendSpec,"ZD")){    let ZD=fetchValue(appendSpec,"ZD");    newL=newL-ZD-2;    let flag=true;    changeMaximum(newL,list,"HD",flag);}## TA≦LA-3if(inputInspection(attrSpec,"LA")){    let LA=fetchValue(attrSpec,"LA");    LA=LA-3;    let flag=true;    changeMaximum(LA,list,"TA",flag);}## TB≦LB-3if(inputInspection(attrSpec,"LB")){    let LB=fetchValue(attrSpec,"LB");    LB=LB-3;    let flag=true;    changeMaximum(LB,list,"TB",flag);}## TD≦L-LA-LB-T-3if(newL!=nil){    newL=newL-3;    let flag=true;    changeMaximum(newL,list,"TD",flag);}## WB≦LB-GB-2if(inputInspection(attrSpec,"LB") && inputInspection(appendSpec,"GB")){    let LB=fetchValue(attrSpec,"LB");    let GB=fetchValue(appendSpec,"GB");    LB=LB-GB-2;    let flag=true;    changeMaximum(LB,list,"WB",flag);}## WD≦L-LA-LB-T-GB-2if(newL!=nil && inputInspection(appendSpec,"GB") ){    let GB=fetchValue(appendSpec,"GB");    newL=newL-GB-2;    let flag=true;    changeMaximum(newL,list,"WD",flag);}## SA≦LA-ℓif(inputInspection(attrSpec,"LA") && inputInspection(attrSpec,"P")){    let P=fetchValue(attrSpec,"P");    l=getConstantP(P);    let LA=fetchValue(attrSpec,"LA");    LA=LA-l;    let flag=true;    changeMaximum(LA,list,"SA",flag);}## SB≦LB-ℓif(inputInspection(attrSpec,"LB") && inputInspection(attrSpec,"Q")){    let Q=fetchValue(attrSpec,"Q");    l=getConstantQ(Q);    let LB=fetchValue(attrSpec,"LB");    LB=LB-l;    let flag=true;    changeMaximum(LB,list,"SB",flag);}return p;