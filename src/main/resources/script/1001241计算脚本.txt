let p = productSearchSkuInfo;let scMax = nil;let lMin = nil;let D=specType;## 当点选和输入都为空的时候，直接不走计算脚本if(genSpec==nil && attrSpec==nil){    return p;}## 输入型遍历检查-判断是否存在fn  inputInspection (attrSpec,value){     for m in attrSpec {        if(m.enSpecName==value){            return true;        }     }      return false;}## 输入型遍历检查-判断是否不存在fn  existenceOrNot (attrSpec,value){     for m in attrSpec {        if(m.enSpecName==value){            return false;        }     }      return true;}## 点选型遍历检查fn  clickInspection (genSpec,value){     for m in attrSpec {        if(m.enSpecName==value){            return true;        }     }      return false;}## 根据情况改变最大值fn  changeMaximum(scMax,list,value,flag){    for m in list {        for n in m.specRangeList {            if(m.enSpecName == value){                if(scMax!=nil && flag){                    if(scMax<n.maxValue){                        n.maxValue = scMax;                    }                }else{                   scMax= scMax-n.stepValue;                    if(scMax<n.maxValue){                        n.maxValue = scMax;                    }                }            }        }    }}## 改变属性的最小值fn  changeMinimum(lMin,list,value,flag){    for m in list {        for n in m.specRangeList {            if(m.enSpecName == value){                if(lMin!=nil && flag){                    println("小于值----"+lMin);                    if(lMin>n.minValue){                        n.minValue = lMin;                    }                }else{                 println("小于值----"+lMin);                 lMin=lMin+n.stepValue;                 println("增加值----"+lMin);                    if(lMin>n.minValue){                        n.minValue = lMin;                    }                }            }        }    }}## 删除点选的值的范围fn removeValue(saveValue,list,value,flag){    ## 筛选对应的需要消除的点选集合    let new_delete_list=seq.list();    for m in list {        ## 遍历属性集合        if(m.enSpecName==value){            for x in m.specValueList{                ## 删大于                if(flag){                    if(x.specValue > saveValue){                        seq.add(new_delete_list,x);                    }                ## 删小于                }else{                    if(x.specValue < saveValue){                        seq.add(new_delete_list,x);                    }                }            }            ## 遍历可删除集合，从该属性的点选集合中删除该元素            for q in new_delete_list{                seq.remove(m.specValueList, q);            }        }    }}## 遍历获取对应的值fn  fetchValue(attrSpec,value){    for m in attrSpec {        if(m.enSpecName==value){            return m.attrSpecValue;        }     }    return false;}## L>=(LA+LB)*2if(inputInspection(attrSpec,"LA") && inputInspection(attrSpec,"LB") && existenceOrNot(attrSpec,"L")){    let LA=fetchValue(attrSpec,"LA");    let LB=fetchValue(attrSpec,"LB");    let L=(LA+LB)*2;    let flag=true;    changeMinimum(L,p.specList,"L",flag);}## L>LA+LB+T 判断L的取值范围if(inputInspection(attrSpec,"LA") && inputInspection(attrSpec,"LB") && inputInspection(genSpec,"T") && existenceOrNot(attrSpec,"L")){    let LA=fetchValue(attrSpec,"LA");    let LB=fetchValue(attrSpec,"LB");    let T=fetchValue(genSpec,"T");    let LA=LA+LB+T;    let flag=false;    changeMinimum(LA,p.specList,"L",flag);}## LA≤L÷2-LB  LB≤L÷2-LAif(inputInspection(attrSpec,"L")){    let L=fetchValue(attrSpec,"L");    if(inputInspection(attrSpec,"LA") && existenceOrNot(attrSpec,"LB")){      let LA=fetchValue(attrSpec,"LA");      L=L/2;      let flag=true;      changeMaximum(L,p.specList,"LA",flag);    }   if(inputInspection(attrSpec,"LB") && existenceOrNot(attrSpec,"LA")){      let LB=fetchValue(attrSpec,"LB");      L=L/2;      let flag=true;      changeMaximum(L,p.specList,"LB",flag);    }}return p;