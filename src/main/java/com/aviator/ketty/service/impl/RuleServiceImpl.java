package com.aviator.ketty.service.impl;import com.aviator.ketty.core.JsonResult;import com.aviator.ketty.mapper.RuleMapper;import com.aviator.ketty.pojo.Rule;import com.aviator.ketty.rule.AbstractAviatorRule;import com.aviator.ketty.rule.AviatorResult;import com.aviator.ketty.rule.DefaultRuleChain;import com.aviator.ketty.rule.RuleChain;import com.aviator.ketty.service.RuleService;import com.aviator.ketty.utils.CheckBasesType;import com.aviator.ketty.verify.VerificationCheck;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;import com.google.gson.Gson;import com.googlecode.aviator.AviatorEvaluator;import org.springframework.stereotype.Service;import java.util.ArrayList;import java.util.List;import java.util.Map;/** * @Author ketty bluce * @Create 2023/6/20 * @Version 1.0 */@Servicepublic class RuleServiceImpl extends ServiceImpl<RuleMapper, Rule> implements RuleService {    @Override    public JsonResult<List<AviatorResult>> VerificationCheck(Map<String, Object> checkParam) {        QueryWrapper<Rule> ruleQueryWrapper = new QueryWrapper<>();        ruleQueryWrapper.eq("spu", checkParam.get("spu")).eq("rule_type", 20);        List<Rule> list = this.list(ruleQueryWrapper);        List<AviatorResult> results = new ArrayList<>();        for (int i = 0; i < list.size(); i++) {            Rule rule = list.get(i);            String expression = rule.getExpression();            // 校验语法            AviatorEvaluator.validate(expression);            // 封装处理规则脚本            List<AbstractAviatorRule> checkRuleList = VerificationCheck.buildCalRules(rule.getRuleId(), expression);            RuleChain ruleChain = new DefaultRuleChain(checkRuleList);            // 新规则集合            List<AbstractAviatorRule> response = new ArrayList<>();            // 参数 + 规则脚本集合 进行执行操作            ruleChain.matchRule(checkParam, response);            // 第一个脚本            AbstractAviatorRule abstractAviatorRule = response.get(0);            // 表达式执行结果            AviatorResult result = abstractAviatorRule.getResult();            results.add(result);            // 结果如果成功            if (result.isSuccess()) {                // 返回对象 true / false                Object res = result.getResult();                // 返回对象 true / false                String toStr = String.valueOf(res);                // 判断执行成功是否                boolean mark = CheckBasesType.isBoolean(toStr);                Gson gson = new Gson();                // 执行失败                if (!mark) {                    // 报错错误信息                    System.out.println(toStr);                }            }        }        return JsonResult.buildSuccess(results);    }}