package com.aviator.ketty.verify;import cn.hutool.core.collection.CollUtil;import cn.hutool.core.util.StrUtil;import com.aviator.ketty.constant.SkuSpecType;import com.aviator.ketty.pojo.*;import com.aviator.ketty.rule.*;import com.aviator.ketty.utils.FileUtils;import com.googlecode.aviator.AviatorEvaluator;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;import java.util.Map;/** * @Author ketty bluce * @Create 2023/6/13 * @Version 1.0 */public class VerificationTest {    public static void main(String[] args) throws IOException {        List<ModelSpec> specList =new ArrayList<>();        List<ModelRangeSpecValue> specRangeList=new ArrayList<>();        List<ModelSpecValue> specValueList=new ArrayList<>();        ProductSearchSkuInfo productSearchSkuInfo = new ProductSearchSkuInfo();        productSearchSkuInfo.setSpecList(specList);        List<AttrSpecEntityRequest> inputSpec = new ArrayList<>();        List<AttrSpecEntityRequest> genSpec = new ArrayList<>();        Map<String, Object> paramSpecMap = buildParamSpecMap(productSearchSkuInfo, inputSpec, genSpec);        // 表达式   Ambitious goals        String expression = FileUtils.loadResourceFileAsString("/examples/1001241-test.av");        // 校验语法        AviatorEvaluator.validate(expression);        List<AbstractAviatorRule> calRuleList = buildCalRules(1L, expression);        RuleChain ruleChain = new DefaultRuleChain(calRuleList);        // 执行计算脚本逻辑        List<AbstractAviatorRule> response = new ArrayList<>();        ruleChain.matchRule(paramSpecMap, response);        AbstractAviatorRule abstractAviatorRule = response.get(0);        AviatorResult result = abstractAviatorRule.getResult();        if (result.isSuccess()) {            ProductSearchSkuInfo modelSkuInfo = (ProductSearchSkuInfo) result.getResult();            System.out.println(modelSkuInfo);        }    }    // 封装处理规则脚本    public static List<AbstractAviatorRule> buildCalRules(Long ruleId, String expresses) {        // 规则对象        AbstractAviatorRule claRule = new CalculatorAviatorRule();        // 规则id        claRule.setRuleId(ruleId);        // 规则表达式        claRule.setExpression(expresses);        // 规则对象集合        List<AbstractAviatorRule> rules = new ArrayList<>();        rules.add(claRule);        return rules;    }    private static Map<String, Object> buildParamSpecMap(ProductSearchSkuInfo productSearchSkuInfo, List<AttrSpecEntityRequest> attrSpec, List<AttrSpecEntityRequest> genSpec) {        Map<String, Object> specMap = new HashMap<>();        Integer D = null;        List<ModelSpec> specList = productSearchSkuInfo.getSpecList();        if (CollUtil.isNotEmpty(specList)) {            for (int i = 0; i < specList.size(); i++) {                String chSpecName = specList.get(i).getChSpecName();                String enSpecName = specList.get(i).getEnSpecName();                if (chSpecName.equals(SkuSpecType.MODEL_D) && enSpecName.equals(SkuSpecType.MODEL_D)) {                    List<ModelSpecValue> specValueList = specList.get(i).getSpecValueList();                    if (CollUtil.isNotEmpty(specValueList)) {                        String specValue = specValueList.get(0).getSpecValue();                        boolean numeric = StrUtil.isNumeric(specValue);                        if (numeric) {                            D = Integer.parseInt(specValue);                        }                    }                }            }        }        // 规范类型        specMap.put("specType", D);        // 产品型号信息        specMap.put("productSearchSkuInfo", productSearchSkuInfo);        // 属性规范        specMap.put("attrSpec", attrSpec);        // 规范        specMap.put("genSpec", genSpec);        return specMap;    }}