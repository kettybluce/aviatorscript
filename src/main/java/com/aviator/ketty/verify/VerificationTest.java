package com.aviator.ketty.verify;import com.aviator.ketty.pojo.AttrSpecEntityRequest;import com.aviator.ketty.pojo.ProductSearchSkuInfo;import com.aviator.ketty.rule.*;import com.aviator.ketty.test.BeanTest;import com.aviator.ketty.utils.FileUtils;import com.google.gson.Gson;import java.io.IOException;import java.util.ArrayList;import java.util.HashMap;import java.util.List;/** * @Author ketty bluce * @Create 2023/6/13 * @Version 1.0 */public class VerificationTest {    //  格式化工具    private static final Gson gson = new Gson();    public static void main(String[] args) throws IOException {        // 输入性参数        List<AttrSpecEntityRequest> inputSpec = new ArrayList<>();        // 点选型        List<AttrSpecEntityRequest> genSpec = new ArrayList<>();        ProductSearchSkuInfo productSearchSkuInfo = BeanTest.generateBean();        // 表达式   Ambitious goals        String expression = FileUtils.loadResourceFileAsString("/examples/1001241-test.av");        // 校验语法//        AviatorEvaluator.validate(expression);        List<AbstractAviatorRule> calRuleList = buildCalRules(1L, expression);        RuleChain ruleChain = new DefaultRuleChain(calRuleList);        // 执行计算脚本逻辑        List<AbstractAviatorRule> response = new ArrayList<>();        ruleChain.matchRule(new HashMap<>(), response);        AbstractAviatorRule abstractAviatorRule = response.get(0);        AviatorResult result = abstractAviatorRule.getResult();        if (result.isSuccess()) {            ProductSearchSkuInfo modelSkuInfo = (ProductSearchSkuInfo) result.getResult();            System.out.println(gson.toJson(modelSkuInfo));        } else {            System.out.println(gson.toJson(productSearchSkuInfo));        }    }    // 封装处理规则脚本    public static List<AbstractAviatorRule> buildCalRules(Long ruleId, String expresses) {        // 规则对象        AbstractAviatorRule claRule = new CalculatorAviatorRule();        // 规则id        claRule.setRuleId(ruleId);        // 规则表达式        claRule.setExpression(expresses);        // 规则对象集合        List<AbstractAviatorRule> rules = new ArrayList<>();        rules.add(claRule);        return rules;    }}