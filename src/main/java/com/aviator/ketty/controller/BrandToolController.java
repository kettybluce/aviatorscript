package com.aviator.ketty.controller;import cn.hutool.core.util.IdUtil;import com.aviator.ketty.core.JsonResult;import com.aviator.ketty.easyExcel.EasyExcelUtil;import com.aviator.ketty.pojo.*;import com.aviator.ketty.service.GoodsBrandClassificationService;import com.aviator.ketty.service.GoodsBrandHotService;import com.aviator.ketty.service.GoodsBrandService;import com.aviator.ketty.service.GoodsKindService;import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import org.springframework.web.multipart.MultipartFile;import javax.annotation.Resource;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;/** * @Author ketty bluce * @Create 2023-11-14 14:35 * @description * @Version 1.0 */@Api(tags = "生成品牌数据")@RestController@RequestMapping("/api/v1/brand")public class BrandToolController {    @Resource    GoodsBrandClassificationService goodsBrandClassificationService;    @Resource    GoodsBrandHotService goodsBrandHotService;    @Resource    GoodsBrandService goodsBrandService;    @Resource    GoodsKindService goodsKindService;    Map<String, String> map = new LinkedHashMap<String, String>();    {        map.put("NSK", "https://kyd-distributor-paltform.oss-accelerate.aliyuncs.com/brand/%E6%81%A9%E6%96%AF%E5%85%8B.png");        map.put("NMB", "https://kyd-distributor-paltform.oss-accelerate.aliyuncs.com/brand/%E7%BE%8E%E8%93%93%E4%BA%9A.png");        map.put("IKO", "https://kyd-distributor-paltform.oss-accelerate.aliyuncs.com/brand/%E4%B8%9C%E6%99%9F.png");        map.put("BANDO", "https://kyd-distributor-paltform.oss-accelerate.aliyuncs.com/brand/%E9%98%AA%E4%B8%9C.png");        map.put("PMI", "https://kyd-distributor-paltform.oss-accelerate.aliyuncs.com/brand/%E9%93%B6%E6%B3%B0.png");        map.put("AIRTAC", "https://kyd-distributor-paltform.oss-accelerate.aliyuncs.com/brand/%E4%BA%9A%E5%BE%B7%E5%AE%A2.png");        map.put("BL", "https://kyd-distributor-paltform.oss-accelerate.aliyuncs.com/brand/%E9%98%AA%E4%B8%9CBL.png");        map.put("TSUBAKI", "https://kyd-distributor-paltform.oss-accelerate.aliyuncs.com/brand/%E6%A4%BF%E6%9C%AC.png");        map.put("TPI", "https://kyd-distributor-paltform.oss-accelerate.aliyuncs.com/brand/%E4%B8%9C%E5%9F%B9.png");        map.put("NBK", "https://kyd-distributor-paltform.oss-accelerate.aliyuncs.com/brand/%E9%94%85%E5%B1%8B%E7%99%BE%E8%BF%AA.png");        map.put("HEPHAIST", "https://kyd-distributor-paltform.oss-accelerate.aliyuncs.com/brand/%E8%B5%AB%E8%8F%B2.png");        map.put("KURODA", "https://kyd-distributor-paltform.oss-accelerate.aliyuncs.com/brand/%E9%BB%91%E7%94%B0.png");        map.put("MAmmut", "https://kyd-distributor-paltform.oss-accelerate.aliyuncs.com/brand/%E7%8A%B8%E6%85%95.png");        map.put("NIDEC", "https://kyd-distributor-paltform.oss-accelerate.aliyuncs.com/brand/%E5%B0%BC%E5%BE%97%E7%A7%91.png");        map.put("圣戈班", "https://kyd-distributor-paltform.oss-accelerate.aliyuncs.com/brand/%E5%9C%A3%E6%88%88%E7%8F%AD.png");        map.put("CPS", "https://kyd-distributor-paltform.oss-accelerate.aliyuncs.com/brand/%E5%B8%8C%E6%9E%87%E6%80%9D.png");        map.put("Akribis", "https://kyd-distributor-paltform.oss-accelerate.aliyuncs.com/brand/%E4%BA%9A%E5%BE%B7%E5%AE%A2.png");    }    @ApiOperation(value = "更新品牌图片")    @PostMapping("/generate/brand")    public JsonResult getCountTest() {        int i = 1;        for (Map.Entry<String, String> entry : map.entrySet()) {            String key = entry.getKey();            String value = entry.getValue();            QueryWrapper<GoodsBrand> queryWrapper = new QueryWrapper<GoodsBrand>().eq("brand_en", key);            GoodsBrand entity = goodsBrandService.getOne(queryWrapper);            if (entity != null) {                entity.setThumbnail(value);                entity.setAuthorizedBrandSort(i);                goodsBrandService.updateById(entity);                i++;            } else {                System.out.println("-------------------" + key);            }        }        return null;    }    @ApiOperation(value = "生成品牌数据")    @PostMapping("/generate/brand/data")    public JsonResult getCountTest(@RequestParam("file") MultipartFile file) throws IOException {        List<ExcelEntity> list = EasyExcelUtil.readExcel(file.getInputStream(), 0, ExcelEntity.class, new EasyExcelUtil.ExcelListener<>(), 2);        // 查询所有的品牌        for (int i = 0; i < list.size(); i++) {            ExcelEntity excelEntity = list.get(i);            String listName = excelEntity.getListName();            GoodsKind one = getGoodsKind(listName);            long snowflakeNextId1 = IdUtil.getSnowflakeNextId();            if (one != null) {                // 热销品分类                GoodsBrandClassification goodsBrandClassification = new GoodsBrandClassification();                goodsBrandClassification.setId(snowflakeNextId1);                // 列表名称                goodsBrandClassification.setListName(one.getKind());                // 列表code                goodsBrandClassification.setListCode(one.getKindCode());                // 列表id                goodsBrandClassification.setListId(one.getId());                goodsBrandClassification.setListSort(i + 1);                goodsBrandClassificationService.save(goodsBrandClassification);            }            // 第一行            String brandOne = excelEntity.getBrandOne();            extracted(brandOne, snowflakeNextId1, 1);            // 第二行            String brandTwo = excelEntity.getBrandTwo();            extracted(brandTwo, snowflakeNextId1, 2);            // 第三行            String brandThree = excelEntity.getBrandThree();            extracted(brandThree, snowflakeNextId1, 3);            // 第四行            String brandFour = excelEntity.getBrandFour();            extracted(brandFour, snowflakeNextId1, 4);            // 第五行            String brandFive = excelEntity.getBrandFive();            extracted(brandFive, snowflakeNextId1, 5);        }        return null;    }    private void extracted(String brandOne, long snowflakeNextId1, Integer number) {        QueryWrapper<GoodsBrand> queryWrapper1 = new QueryWrapper<>();        queryWrapper1.eq("brand_en", brandOne);        GoodsBrand entity = goodsBrandService.getOne(queryWrapper1);        if (entity != null) {            GoodsBrandHot goodsBrandHot = new GoodsBrandHot();            goodsBrandHot.setId(IdUtil.getSnowflakeNextId());            goodsBrandHot.setClassificationId(snowflakeNextId1);            goodsBrandHot.setBrandId(entity.getId());            goodsBrandHot.setBrandName(entity.getBrandEn());            goodsBrandHot.setBrandSort(number);            goodsBrandHot.setBrandPicture(entity.getThumbnail());            goodsBrandHotService.save(goodsBrandHot);        }    }    private GoodsKind getGoodsKind(String listName) {        QueryWrapper<GoodsKind> queryWrapper = new QueryWrapper<>();        queryWrapper.eq("kind", listName);        queryWrapper.eq("kind_level", 1);        GoodsKind one = goodsKindService.getOne(queryWrapper);        return one;    }    /**     * 将本地的Excel文件转换为InputStream     *     * @param filePath Excel文件路径     * @return InputStream对象     * @throws IOException 如果文件读取失败     */    public static InputStream getExcelInputStream(String filePath) throws IOException {        File file = new File(filePath);        FileInputStream fis = new FileInputStream(file);        return fis;    }}